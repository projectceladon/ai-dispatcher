/*
* Copyright (c) 2022 Intel Corporation
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.intel.examples.objectDetection";
option java_outer_classname = "objectDetectionProto";
option objc_class_prefix = "HLW";

package objectDetection;

// The Detection service definition.
service Detection {
  // Send Input Blobs and receive Output Blobs
  rpc getInferResult (RequestDataTensors) returns (ReplyDataTensors) {}
  rpc sendXml (stream RequestDataChunks) returns (ReplyStatus) {}
  rpc sendBin (stream RequestDataChunks) returns (ReplyStatus) {}
  rpc loadModel(RequestString) returns (ReplyStatus) {}
  rpc prepare (RequestString) returns (ReplyStatus) {} //Placeholder for any future support : RequestString
  rpc release (RequestString) returns (ReplyStatus) {}
}


message Token {
  uint32 data = 1;
}

message RequestDataChunks {
  bytes data = 1;
  Token token = 2;
}

message RequestString {
  Token token = 1;
}
message ReplyStatus {
  bool status = 1;
}

// Structure defining the structure of the Data Tensor(blob)
message DataTensor {
  bytes data = 1;
  string node_name = 2;
  repeated int32 tensor_shape = 3;
  enum DATA_TYPE {
    boolean = 0;
    bf16 = 1;
    f16 = 2;
    f32 = 3;
    f64 = 4;
    i4 = 5;
    i8 = 6;
    i16 = 7;
    i32 = 8;
    i64 = 9;
    u1 = 10;
    u4 = 11;
    u8 = 12;
    u16 = 13;
    u32 = 14;
    u64 = 15;
  }
  DATA_TYPE data_type = 4;
}

// Reply message containing the Output Data Tensors(blobs)
message ReplyDataTensors {
  repeated DataTensor data_tensors = 1;
}

// Request message containing the Input Data Tensors(blobs)
message RequestDataTensors {
  repeated DataTensor data_tensors = 1;
  Token token = 2;
}
